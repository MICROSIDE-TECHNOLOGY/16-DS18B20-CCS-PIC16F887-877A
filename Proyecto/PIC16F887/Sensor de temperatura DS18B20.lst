CCS PCM C Compiler, Version 5.076, 56587               24-feb.-22 15:27

               Filename:   E:\Martin Hdez\Desktop\CCS 16F\887\Práctica 16\Sensor de temperatura DS18B20.lst

               ROM used:   1296 words (16%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           36 (10%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4C7
0003:  NOP
.................... /* 
.................... AUTOR: MICROSIDE TECHNOLOGY S.A. DE C.V. 
.................... FECHA: JUNIO 2019 
.................... */ 
....................  
.................... /* 
.................... ------------------------------------------------------------------------------ 
.................... Esta práctica consiste en realizar la medición de temperatura por medio de un 
.................... sensor DS18B20 e imprimir la lectura en una pantalla LCD 
.................... ------------------------------------------------------------------------------ 
.................... */ 
....................  
.................... #include <16F887.h>                            //Incluye el microcontrolador con el que se va a trabajar  
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,2A
000D:  DATA E5,36
000E:  DATA F0,32
000F:  DATA F2,30
0010:  DATA F4,3A
0011:  DATA F2,30
0012:  DATA 20,05
0013:  DATA A5,19
0014:  DATA AE,18
0015:  DATA E6,21
0016:  DATA 00,00
*
017E:  MOVLW  8E
017F:  MOVWF  77
0180:  MOVF   2E,W
0181:  MOVWF  78
0182:  MOVF   2D,W
0183:  MOVWF  79
0184:  CLRF   7A
0185:  BTFSS  2E.7
0186:  GOTO   18C
0187:  COMF   78,F
0188:  COMF   79,F
0189:  INCF   79,F
018A:  BTFSC  03.2
018B:  INCF   78,F
018C:  MOVF   78,F
018D:  BTFSS  03.2
018E:  GOTO   199
018F:  MOVF   79,W
0190:  MOVWF  78
0191:  CLRF   79
0192:  MOVLW  08
0193:  SUBWF  77,F
0194:  MOVF   78,F
0195:  BTFSS  03.2
0196:  GOTO   199
0197:  CLRF   77
0198:  GOTO   1A2
0199:  BCF    03.0
019A:  BTFSC  78.7
019B:  GOTO   1A0
019C:  RLF    79,F
019D:  RLF    78,F
019E:  DECF   77,F
019F:  GOTO   199
01A0:  BTFSS  2E.7
01A1:  BCF    78.7
*
01B7:  MOVF   31,W
01B8:  BTFSC  03.2
01B9:  GOTO   27C
01BA:  MOVWF  3D
01BB:  MOVF   35,W
01BC:  BTFSC  03.2
01BD:  GOTO   27C
01BE:  SUBWF  3D,F
01BF:  BTFSS  03.0
01C0:  GOTO   1C6
01C1:  MOVLW  7F
01C2:  ADDWF  3D,F
01C3:  BTFSC  03.0
01C4:  GOTO   27C
01C5:  GOTO   1CC
01C6:  MOVLW  81
01C7:  SUBWF  3D,F
01C8:  BTFSS  03.0
01C9:  GOTO   27C
01CA:  BTFSC  03.2
01CB:  GOTO   27C
01CC:  MOVF   3D,W
01CD:  MOVWF  77
01CE:  CLRF   78
01CF:  CLRF   79
01D0:  CLRF   7A
01D1:  CLRF   3C
01D2:  MOVF   32,W
01D3:  MOVWF  3B
01D4:  BSF    3B.7
01D5:  MOVF   33,W
01D6:  MOVWF  3A
01D7:  MOVF   34,W
01D8:  MOVWF  39
01D9:  MOVLW  19
01DA:  MOVWF  3D
01DB:  MOVF   38,W
01DC:  SUBWF  39,F
01DD:  BTFSC  03.0
01DE:  GOTO   1EF
01DF:  MOVLW  01
01E0:  SUBWF  3A,F
01E1:  BTFSC  03.0
01E2:  GOTO   1EF
01E3:  SUBWF  3B,F
01E4:  BTFSC  03.0
01E5:  GOTO   1EF
01E6:  SUBWF  3C,F
01E7:  BTFSC  03.0
01E8:  GOTO   1EF
01E9:  INCF   3C,F
01EA:  INCF   3B,F
01EB:  INCF   3A,F
01EC:  MOVF   38,W
01ED:  ADDWF  39,F
01EE:  GOTO   221
01EF:  MOVF   37,W
01F0:  SUBWF  3A,F
01F1:  BTFSC  03.0
01F2:  GOTO   20A
01F3:  MOVLW  01
01F4:  SUBWF  3B,F
01F5:  BTFSC  03.0
01F6:  GOTO   20A
01F7:  SUBWF  3C,F
01F8:  BTFSC  03.0
01F9:  GOTO   20A
01FA:  INCF   3C,F
01FB:  INCF   3B,F
01FC:  MOVF   37,W
01FD:  ADDWF  3A,F
01FE:  MOVF   38,W
01FF:  ADDWF  39,F
0200:  BTFSS  03.0
0201:  GOTO   221
0202:  INCF   3A,F
0203:  BTFSS  03.2
0204:  GOTO   221
0205:  INCF   3B,F
0206:  BTFSS  03.2
0207:  GOTO   221
0208:  INCF   3C,F
0209:  GOTO   221
020A:  MOVF   36,W
020B:  IORLW  80
020C:  SUBWF  3B,F
020D:  BTFSC  03.0
020E:  GOTO   220
020F:  MOVLW  01
0210:  SUBWF  3C,F
0211:  BTFSC  03.0
0212:  GOTO   220
0213:  INCF   3C,F
0214:  MOVF   36,W
0215:  IORLW  80
0216:  ADDWF  3B,F
0217:  MOVF   37,W
0218:  ADDWF  3A,F
0219:  BTFSS  03.0
021A:  GOTO   1FE
021B:  INCF   3B,F
021C:  BTFSS  03.2
021D:  GOTO   1FE
021E:  INCF   3C,F
021F:  GOTO   1FE
0220:  BSF    7A.0
0221:  DECFSZ 3D,F
0222:  GOTO   224
0223:  GOTO   22F
0224:  BCF    03.0
0225:  RLF    39,F
0226:  RLF    3A,F
0227:  RLF    3B,F
0228:  RLF    3C,F
0229:  BCF    03.0
022A:  RLF    7A,F
022B:  RLF    79,F
022C:  RLF    78,F
022D:  RLF    3E,F
022E:  GOTO   1DB
022F:  BTFSS  3E.0
0230:  GOTO   237
0231:  BCF    03.0
0232:  RRF    78,F
0233:  RRF    79,F
0234:  RRF    7A,F
0235:  RRF    3E,F
0236:  GOTO   23A
0237:  DECF   77,F
0238:  BTFSC  03.2
0239:  GOTO   27C
023A:  BTFSC  3E.7
023B:  GOTO   263
023C:  BCF    03.0
023D:  RLF    39,F
023E:  RLF    3A,F
023F:  RLF    3B,F
0240:  RLF    3C,F
0241:  MOVF   38,W
0242:  SUBWF  39,F
0243:  BTFSC  03.0
0244:  GOTO   24F
0245:  MOVLW  01
0246:  SUBWF  3A,F
0247:  BTFSC  03.0
0248:  GOTO   24F
0249:  SUBWF  3B,F
024A:  BTFSC  03.0
024B:  GOTO   24F
024C:  SUBWF  3C,F
024D:  BTFSS  03.0
024E:  GOTO   272
024F:  MOVF   37,W
0250:  SUBWF  3A,F
0251:  BTFSC  03.0
0252:  GOTO   25A
0253:  MOVLW  01
0254:  SUBWF  3B,F
0255:  BTFSC  03.0
0256:  GOTO   25A
0257:  SUBWF  3C,F
0258:  BTFSS  03.0
0259:  GOTO   272
025A:  MOVF   36,W
025B:  IORLW  80
025C:  SUBWF  3B,F
025D:  BTFSC  03.0
025E:  GOTO   263
025F:  MOVLW  01
0260:  SUBWF  3C,F
0261:  BTFSS  03.0
0262:  GOTO   272
0263:  INCF   7A,F
0264:  BTFSS  03.2
0265:  GOTO   272
0266:  INCF   79,F
0267:  BTFSS  03.2
0268:  GOTO   272
0269:  INCF   78,F
026A:  BTFSS  03.2
026B:  GOTO   272
026C:  INCF   77,F
026D:  BTFSC  03.2
026E:  GOTO   27C
026F:  RRF    78,F
0270:  RRF    79,F
0271:  RRF    7A,F
0272:  MOVF   32,W
0273:  MOVWF  3D
0274:  MOVF   36,W
0275:  XORWF  3D,F
0276:  BTFSS  3D.7
0277:  GOTO   27A
0278:  BSF    78.7
0279:  GOTO   280
027A:  BCF    78.7
027B:  GOTO   280
027C:  CLRF   77
027D:  CLRF   78
027E:  CLRF   79
027F:  CLRF   7A
*
02CA:  MOVF   0B,W
02CB:  MOVWF  25
02CC:  BCF    0B.7
02CD:  BSF    03.5
02CE:  BSF    03.6
02CF:  BSF    0C.7
02D0:  BSF    0C.0
02D1:  NOP
02D2:  NOP
02D3:  BCF    03.5
02D4:  BCF    03.6
02D5:  BTFSC  25.7
02D6:  BSF    0B.7
02D7:  BTFSC  03.0
02D8:  GOTO   301
02D9:  BSF    03.6
02DA:  MOVF   0C,W
02DB:  ANDLW  7F
02DC:  BCF    03.6
02DD:  MOVWF  25
02DE:  BSF    03.6
02DF:  MOVF   0D,W
02E0:  BCF    03.6
02E1:  MOVWF  26
02E2:  BSF    03.6
02E3:  MOVF   0F,W
02E4:  BCF    03.6
02E5:  MOVWF  27
02E6:  MOVF   25,W
02E7:  MOVWF  31
02E8:  CALL   296
02E9:  MOVF   26,W
02EA:  BSF    03.6
02EB:  MOVWF  0D
02EC:  BCF    03.6
02ED:  MOVF   27,W
02EE:  BSF    03.6
02EF:  MOVWF  0F
02F0:  BCF    03.6
02F1:  MOVF   0B,W
02F2:  MOVWF  28
02F3:  BCF    0B.7
02F4:  BSF    03.5
02F5:  BSF    03.6
02F6:  BSF    0C.7
02F7:  BSF    0C.0
02F8:  NOP
02F9:  NOP
02FA:  BCF    03.5
02FB:  BCF    03.6
02FC:  BTFSC  28.7
02FD:  BSF    0B.7
02FE:  DECFSZ 24,F
02FF:  GOTO   301
0300:  GOTO   320
0301:  BSF    03.6
0302:  RLF    0C,W
0303:  RLF    0E,W
0304:  ANDLW  7F
0305:  BCF    03.6
0306:  MOVWF  25
0307:  BSF    03.6
0308:  MOVF   0D,W
0309:  BCF    03.6
030A:  MOVWF  26
030B:  BSF    03.6
030C:  MOVF   0F,W
030D:  BCF    03.6
030E:  MOVWF  27
030F:  MOVF   25,W
0310:  MOVWF  31
0311:  CALL   296
0312:  MOVF   26,W
0313:  BSF    03.6
0314:  MOVWF  0D
0315:  BCF    03.6
0316:  MOVF   27,W
0317:  BSF    03.6
0318:  MOVWF  0F
0319:  INCF   0D,F
031A:  BTFSC  03.2
031B:  INCF   0F,F
031C:  BCF    03.0
031D:  BCF    03.6
031E:  DECFSZ 24,F
031F:  GOTO   2CA
0320:  BCF    0A.3
0321:  BCF    0A.4
0322:  GOTO   4F7 (RETURN)
0323:  BTFSC  03.1
0324:  GOTO   328
0325:  MOVLW  39
0326:  MOVWF  04
0327:  BCF    03.7
0328:  CLRF   77
0329:  CLRF   78
032A:  CLRF   79
032B:  CLRF   7A
032C:  CLRF   39
032D:  CLRF   3A
032E:  CLRF   3B
032F:  CLRF   3C
0330:  MOVF   38,W
0331:  IORWF  37,W
0332:  IORWF  36,W
0333:  IORWF  35,W
0334:  BTFSC  03.2
0335:  GOTO   366
0336:  MOVLW  20
0337:  MOVWF  3D
0338:  BCF    03.0
0339:  RLF    31,F
033A:  RLF    32,F
033B:  RLF    33,F
033C:  RLF    34,F
033D:  RLF    39,F
033E:  RLF    3A,F
033F:  RLF    3B,F
0340:  RLF    3C,F
0341:  MOVF   38,W
0342:  SUBWF  3C,W
0343:  BTFSS  03.2
0344:  GOTO   34F
0345:  MOVF   37,W
0346:  SUBWF  3B,W
0347:  BTFSS  03.2
0348:  GOTO   34F
0349:  MOVF   36,W
034A:  SUBWF  3A,W
034B:  BTFSS  03.2
034C:  GOTO   34F
034D:  MOVF   35,W
034E:  SUBWF  39,W
034F:  BTFSS  03.0
0350:  GOTO   360
0351:  MOVF   35,W
0352:  SUBWF  39,F
0353:  MOVF   36,W
0354:  BTFSS  03.0
0355:  INCFSZ 36,W
0356:  SUBWF  3A,F
0357:  MOVF   37,W
0358:  BTFSS  03.0
0359:  INCFSZ 37,W
035A:  SUBWF  3B,F
035B:  MOVF   38,W
035C:  BTFSS  03.0
035D:  INCFSZ 38,W
035E:  SUBWF  3C,F
035F:  BSF    03.0
0360:  RLF    77,F
0361:  RLF    78,F
0362:  RLF    79,F
0363:  RLF    7A,F
0364:  DECFSZ 3D,F
0365:  GOTO   338
0366:  MOVF   39,W
0367:  MOVWF  00
0368:  INCF   04,F
0369:  MOVF   3A,W
036A:  MOVWF  00
036B:  INCF   04,F
036C:  MOVF   3B,W
036D:  MOVWF  00
036E:  INCF   04,F
036F:  MOVF   3C,W
0370:  MOVWF  00
0371:  RETURN
0372:  MOVF   04,W
0373:  MOVWF  29
0374:  MOVF   28,W
0375:  MOVWF  2B
0376:  BTFSC  03.2
0377:  GOTO   404
0378:  MOVF   27,W
0379:  MOVWF  34
037A:  MOVF   26,W
037B:  MOVWF  33
037C:  MOVF   25,W
037D:  MOVWF  32
037E:  MOVF   24,W
037F:  MOVWF  31
0380:  CLRF   38
0381:  CLRF   37
0382:  MOVLW  20
0383:  MOVWF  36
0384:  MOVLW  82
0385:  MOVWF  35
0386:  MOVF   31,W
0387:  BTFSC  03.2
0388:  GOTO   3F6
0389:  MOVWF  39
038A:  MOVF   35,W
038B:  BTFSC  03.2
038C:  GOTO   3F6
038D:  ADDWF  39,F
038E:  BTFSC  03.0
038F:  GOTO   397
0390:  MOVLW  7F
0391:  SUBWF  39,F
0392:  BTFSS  03.0
0393:  GOTO   3F6
0394:  BTFSC  03.2
0395:  GOTO   3F6
0396:  GOTO   39B
0397:  MOVLW  81
0398:  ADDWF  39,F
0399:  BTFSC  03.0
039A:  GOTO   3F6
039B:  MOVF   39,W
039C:  MOVWF  77
039D:  CLRF   78
039E:  CLRF   79
039F:  CLRF   7A
03A0:  MOVF   32,W
03A1:  MOVWF  3D
03A2:  BSF    3D.7
03A3:  MOVF   33,W
03A4:  MOVWF  3C
03A5:  MOVF   34,W
03A6:  MOVWF  3B
03A7:  MOVLW  18
03A8:  MOVWF  39
03A9:  CLRF   3A
03AA:  BTFSS  3B.0
03AB:  GOTO   3C4
03AC:  MOVF   38,W
03AD:  ADDWF  7A,F
03AE:  BTFSS  03.0
03AF:  GOTO   3B6
03B0:  INCF   79,F
03B1:  BTFSS  03.2
03B2:  GOTO   3B6
03B3:  INCF   78,F
03B4:  BTFSC  03.2
03B5:  BSF    3A.7
03B6:  MOVF   37,W
03B7:  ADDWF  79,F
03B8:  BTFSS  03.0
03B9:  GOTO   3BD
03BA:  INCF   78,F
03BB:  BTFSC  03.2
03BC:  BSF    3A.7
03BD:  MOVF   36,W
03BE:  MOVWF  33
03BF:  BSF    33.7
03C0:  MOVF   33,W
03C1:  ADDWF  78,F
03C2:  BTFSC  03.0
03C3:  BSF    3A.7
03C4:  RLF    3A,F
03C5:  RRF    78,F
03C6:  RRF    79,F
03C7:  RRF    7A,F
03C8:  RRF    3D,F
03C9:  RRF    3C,F
03CA:  RRF    3B,F
03CB:  BCF    03.0
03CC:  DECFSZ 39,F
03CD:  GOTO   3A9
03CE:  MOVLW  01
03CF:  ADDWF  77,F
03D0:  BTFSC  03.0
03D1:  GOTO   3F6
03D2:  BTFSC  78.7
03D3:  GOTO   3DB
03D4:  RLF    3D,F
03D5:  RLF    7A,F
03D6:  RLF    79,F
03D7:  RLF    78,F
03D8:  DECF   77,F
03D9:  BTFSC  03.2
03DA:  GOTO   3F6
03DB:  BTFSS  3D.7
03DC:  GOTO   3EC
03DD:  INCF   7A,F
03DE:  BTFSS  03.2
03DF:  GOTO   3EC
03E0:  INCF   79,F
03E1:  BTFSS  03.2
03E2:  GOTO   3EC
03E3:  INCF   78,F
03E4:  BTFSS  03.2
03E5:  GOTO   3EC
03E6:  RRF    78,F
03E7:  RRF    79,F
03E8:  RRF    7A,F
03E9:  INCF   77,F
03EA:  BTFSC  03.2
03EB:  GOTO   3F6
03EC:  MOVF   32,W
03ED:  MOVWF  3A
03EE:  MOVF   36,W
03EF:  XORWF  3A,F
03F0:  BTFSS  3A.7
03F1:  GOTO   3F4
03F2:  BSF    78.7
03F3:  GOTO   3FA
03F4:  BCF    78.7
03F5:  GOTO   3FA
03F6:  CLRF   77
03F7:  CLRF   78
03F8:  CLRF   79
03F9:  CLRF   7A
03FA:  MOVF   7A,W
03FB:  MOVWF  27
03FC:  MOVF   79,W
03FD:  MOVWF  26
03FE:  MOVF   78,W
03FF:  MOVWF  25
0400:  MOVF   77,W
0401:  MOVWF  24
0402:  DECFSZ 2B,F
0403:  GOTO   378
0404:  MOVF   27,W
0405:  MOVWF  34
0406:  MOVF   26,W
0407:  MOVWF  33
0408:  MOVF   25,W
0409:  MOVWF  32
040A:  MOVF   24,W
040B:  MOVWF  31
040C:  MOVF   31,W
040D:  SUBLW  B6
040E:  MOVWF  31
040F:  CLRF   7A
0410:  MOVF   32,W
0411:  MOVWF  35
0412:  BSF    32.7
0413:  BCF    03.0
0414:  RRF    32,F
0415:  RRF    33,F
0416:  RRF    34,F
0417:  RRF    7A,F
0418:  RRF    79,F
0419:  RRF    78,F
041A:  RRF    77,F
041B:  DECFSZ 31,F
041C:  GOTO   413
041D:  BTFSS  35.7
041E:  GOTO   42A
041F:  COMF   77,F
0420:  COMF   78,F
0421:  COMF   79,F
0422:  COMF   7A,F
0423:  INCF   77,F
0424:  BTFSC  03.2
0425:  INCF   78,F
0426:  BTFSC  03.2
0427:  INCF   79,F
0428:  BTFSC  03.2
0429:  INCF   7A,F
042A:  MOVF   7A,W
042B:  MOVWF  27
042C:  MOVF   79,W
042D:  MOVWF  26
042E:  MOVF   78,W
042F:  MOVWF  25
0430:  MOVF   77,W
0431:  MOVWF  24
0432:  BTFSS  27.7
0433:  GOTO   441
0434:  DECF   29,F
0435:  BSF    29.5
0436:  COMF   24,F
0437:  COMF   25,F
0438:  COMF   26,F
0439:  COMF   27,F
043A:  INCF   24,F
043B:  BTFSC  03.2
043C:  INCF   25,F
043D:  BTFSC  03.2
043E:  INCF   26,F
043F:  BTFSC  03.2
0440:  INCF   27,F
0441:  MOVLW  3B
0442:  MOVWF  30
0443:  MOVLW  9A
0444:  MOVWF  2F
0445:  MOVLW  CA
0446:  MOVWF  2E
0447:  CLRF   2D
0448:  MOVLW  0A
0449:  MOVWF  2B
044A:  MOVF   28,W
044B:  BTFSC  03.2
044C:  INCF   29,F
044D:  BSF    03.1
044E:  MOVLW  24
044F:  MOVWF  04
0450:  BCF    03.7
0451:  MOVF   27,W
0452:  MOVWF  34
0453:  MOVF   26,W
0454:  MOVWF  33
0455:  MOVF   25,W
0456:  MOVWF  32
0457:  MOVF   24,W
0458:  MOVWF  31
0459:  MOVF   30,W
045A:  MOVWF  38
045B:  MOVF   2F,W
045C:  MOVWF  37
045D:  MOVF   2E,W
045E:  MOVWF  36
045F:  MOVF   2D,W
0460:  MOVWF  35
0461:  CALL   323
0462:  MOVF   78,W
0463:  MOVF   77,F
0464:  BTFSS  03.2
0465:  GOTO   479
0466:  INCF   28,W
0467:  SUBWF  2B,W
0468:  BTFSC  03.2
0469:  GOTO   479
046A:  MOVF   29,W
046B:  BTFSC  03.2
046C:  GOTO   47B
046D:  ANDLW  0F
046E:  SUBWF  2B,W
046F:  BTFSC  03.2
0470:  GOTO   473
0471:  BTFSC  03.0
0472:  GOTO   4AB
0473:  BTFSC  29.7
0474:  GOTO   4AB
0475:  BTFSC  29.6
0476:  GOTO   47B
0477:  MOVLW  20
0478:  GOTO   4A7
0479:  MOVLW  20
047A:  ANDWF  29,F
047B:  BTFSS  29.5
047C:  GOTO   489
047D:  BCF    29.5
047E:  MOVF   28,W
047F:  BTFSS  03.2
0480:  DECF   29,F
0481:  MOVF   77,W
0482:  MOVWF  29
0483:  MOVLW  2D
0484:  MOVWF  31
0485:  CALL   296
0486:  MOVF   29,W
0487:  MOVWF  77
0488:  CLRF   29
0489:  MOVF   28,W
048A:  SUBWF  2B,W
048B:  BTFSS  03.2
048C:  GOTO   497
048D:  MOVF   77,W
048E:  MOVWF  29
048F:  MOVLW  2E
0490:  MOVWF  31
0491:  CALL   296
0492:  MOVF   29,W
0493:  MOVWF  77
0494:  MOVLW  20
0495:  ANDWF  29,F
0496:  MOVLW  00
0497:  MOVLW  30
0498:  BTFSS  29.5
0499:  GOTO   4A7
049A:  BCF    29.5
049B:  MOVF   28,W
049C:  BTFSS  03.2
049D:  DECF   29,F
049E:  MOVF   77,W
049F:  MOVWF  29
04A0:  MOVLW  2D
04A1:  MOVWF  31
04A2:  CALL   296
04A3:  MOVF   29,W
04A4:  MOVWF  77
04A5:  CLRF   29
04A6:  MOVLW  30
04A7:  ADDWF  77,F
04A8:  MOVF   77,W
04A9:  MOVWF  31
04AA:  CALL   296
04AB:  BCF    03.1
04AC:  MOVF   30,W
04AD:  MOVWF  34
04AE:  MOVF   2F,W
04AF:  MOVWF  33
04B0:  MOVF   2E,W
04B1:  MOVWF  32
04B2:  MOVF   2D,W
04B3:  MOVWF  31
04B4:  CLRF   38
04B5:  CLRF   37
04B6:  CLRF   36
04B7:  MOVLW  0A
04B8:  MOVWF  35
04B9:  CALL   323
04BA:  MOVF   7A,W
04BB:  MOVWF  30
04BC:  MOVF   79,W
04BD:  MOVWF  2F
04BE:  MOVF   78,W
04BF:  MOVWF  2E
04C0:  MOVF   77,W
04C1:  MOVWF  2D
04C2:  DECFSZ 2B,F
04C3:  GOTO   44D
04C4:  BCF    0A.3
04C5:  BCF    0A.4
04C6:  GOTO   504 (RETURN)
....................  
.................... #list 
....................  
.................... #use delay(clock=20Mhz, crystal)                //Tipo de oscilador y frecuencia dependiendo del microcontrolador  
*
0017:  MOVLW  32
0018:  MOVWF  04
0019:  BCF    03.7
001A:  MOVF   00,W
001B:  BTFSC  03.2
001C:  GOTO   02A
001D:  MOVLW  06
001E:  MOVWF  78
001F:  CLRF   77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  DECFSZ 78,F
0023:  GOTO   01F
0024:  MOVLW  7B
0025:  MOVWF  77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  DECFSZ 00,F
0029:  GOTO   01D
002A:  RETURN
*
00E9:  MOVLW  03
00EA:  SUBWF  2E,F
00EB:  BTFSS  03.0
00EC:  GOTO   0F7
00ED:  MOVLW  2E
00EE:  MOVWF  04
00EF:  BCF    03.7
00F0:  MOVF   00,W
00F1:  BTFSC  03.2
00F2:  GOTO   0F7
00F3:  GOTO   0F5
00F4:  GOTO   0F5
00F5:  DECFSZ 00,F
00F6:  GOTO   0F4
00F7:  RETURN
....................  
.................... /* 
.................... ------------------------------------------------------------------------------ 
.................... CONFIGURACION DE PINES LCD 
.................... ------------------------------------------------------------------------------ 
.................... */ 
....................  
.................... #define LCD_RS PIN_B0                           //CONTROL del LCD 
.................... #define LCD_RW PIN_B1 
.................... #define LCD_E PIN_B2 
.................... #define LCD_DB4 PIN_B3                          //DATOS del LCD (4 líneas) 
.................... #define LCD_DB5 PIN_B4 
.................... #define LCD_DB6 PIN_B5 
.................... #define LCD_DB7 PIN_B6 
....................  
....................  
....................  
.................... #define DS1820_PIN PIN_A0                       //Se define pin como entrada digital para leer datos del sensor DS18B20 
.................... #define ONE_WIRE_PIN DS1820_PIN 
....................  
....................  
.................... #include<1wire.c>                               //Se incluyen las librerías correspondientes para el manejo del protocolo 1WIRE 
....................  
.................... // (C) copyright 2003 j.d.sandoz / jds-pic !at! losdos.dyndns.org 
....................  
.................... // released under the GNU GENERAL PUBLIC LICENSE (GPL) 
.................... // refer to http://www.gnu.org/licenses/gpl.txt 
....................  
.................... // This program is free software; you can redistribute it and/or modify 
.................... // it under the terms of the GNU General Public License as published by 
.................... // the Free Software Foundation; either version 2 of the License, or 
.................... // (at your option) any later version. 
....................  
.................... // This program is distributed in the hope that it will be useful, 
.................... // but WITHOUT ANY WARRANTY; without even the implied warranty of 
.................... // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
.................... // GNU General Public License for more details. 
....................  
.................... // You should have received a copy of the GNU General Public License 
.................... // along with this program; if not, write to the Free Software 
.................... // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
....................  
.................... /***********************1Wire Class***********************/ 
.................... /*Description: This class handles all communication */ 
.................... /* between the processor and the 1wire */ 
.................... /* sensors. 
.................... /*********************************************************/ 
....................  
.................... /*-------1-wire definitions-------*/ 
.................... //#define ONE_WIRE_PIN PIN_B3 
....................  
.................... /*******************1-wire communication functions********************/ 
....................  
.................... /************onewire_reset*************************************************/ 
.................... /*This function initiates the 1wire bus */ 
.................... /* */ 
.................... /*PARAMETERS: */ 
.................... /*RETURNS: */ 
.................... /*********************************************************************/ 
....................  
.................... void onewire_reset()  // OK if just using a single permanently connected device 
.................... { 
....................  output_low(ONE_WIRE_PIN); 
00F8:  BSF    03.5
00F9:  BCF    05.0
00FA:  BCF    03.5
00FB:  BCF    05.0
....................  delay_us( 500 ); // pull 1-wire low for reset pulse 
00FC:  MOVLW  02
00FD:  MOVWF  2D
00FE:  MOVLW  F9
00FF:  MOVWF  2E
0100:  CALL   0E9
0101:  DECFSZ 2D,F
0102:  GOTO   0FE
....................  output_float(ONE_WIRE_PIN); // float 1-wire high 
0103:  BSF    03.5
0104:  BSF    05.0
....................  delay_us( 500 ); // wait-out remaining initialisation window. 
0105:  MOVLW  02
0106:  BCF    03.5
0107:  MOVWF  2D
0108:  MOVLW  F9
0109:  MOVWF  2E
010A:  CALL   0E9
010B:  DECFSZ 2D,F
010C:  GOTO   108
....................  output_float(ONE_WIRE_PIN); 
010D:  BSF    03.5
010E:  BSF    05.0
010F:  BCF    03.5
0110:  RETURN
.................... } 
....................  
.................... /*********************** onewire_write() ********************************/ 
.................... /*This function writes a byte to the sensor.*/ 
.................... /* */ 
.................... /*Parameters: byte - the byte to be written to the 1-wire */ 
.................... /*Returns: */ 
.................... /*********************************************************************/ 
....................  
.................... void onewire_write(int data) 
.................... { 
....................  int count; 
....................  
....................  for (count=0; count<8; ++count) 
0111:  CLRF   2E
0112:  MOVF   2E,W
0113:  SUBLW  07
0114:  BTFSS  03.0
0115:  GOTO   134
....................  { 
....................   output_low(ONE_WIRE_PIN); 
0116:  BSF    03.5
0117:  BCF    05.0
0118:  BCF    03.5
0119:  BCF    05.0
....................   delay_us( 2 ); // pull 1-wire low to initiate write time-slot. 
011A:  MOVLW  03
011B:  MOVWF  77
011C:  DECFSZ 77,F
011D:  GOTO   11C
....................   output_bit(ONE_WIRE_PIN, shift_right(&data,1,0)); // set output bit on 1-wire 
011E:  BCF    03.0
011F:  RRF    2D,F
0120:  BTFSC  03.0
0121:  GOTO   124
0122:  BCF    05.0
0123:  GOTO   125
0124:  BSF    05.0
0125:  BSF    03.5
0126:  BCF    05.0
....................   delay_us( 60 ); // wait until end of write slot. 
0127:  MOVLW  63
0128:  MOVWF  77
0129:  DECFSZ 77,F
012A:  GOTO   129
012B:  GOTO   12C
....................   output_float(ONE_WIRE_PIN); // set 1-wire high again, 
012C:  BSF    05.0
....................   delay_us( 2 ); // for more than 1us minimum. 
012D:  MOVLW  03
012E:  MOVWF  77
012F:  DECFSZ 77,F
0130:  GOTO   12F
0131:  BCF    03.5
0132:  INCF   2E,F
0133:  GOTO   112
....................  } 
0134:  RETURN
.................... } 
....................  
.................... /*********************** read1wire() *********************************/ 
.................... /*This function reads the 8 -bit data via the 1-wire sensor. */ 
.................... /* */ 
.................... /*Parameters: */ 
.................... /*Returns: 8-bit (1-byte) data from sensor */ 
.................... /*********************************************************************/ 
....................  
.................... int onewire_read() 
.................... { 
....................  int count, data; 
....................  
....................  for (count=0; count<8; ++count) 
0135:  CLRF   2D
0136:  MOVF   2D,W
0137:  SUBLW  07
0138:  BTFSS  03.0
0139:  GOTO   157
....................  { 
....................   output_low(ONE_WIRE_PIN); 
013A:  BSF    03.5
013B:  BCF    05.0
013C:  BCF    03.5
013D:  BCF    05.0
....................   delay_us( 2 ); // pull 1-wire low to initiate read time-slot. 
013E:  MOVLW  03
013F:  MOVWF  77
0140:  DECFSZ 77,F
0141:  GOTO   140
....................   output_float(ONE_WIRE_PIN); // now let 1-wire float high, 
0142:  BSF    03.5
0143:  BSF    05.0
....................   delay_us( 8 ); // let device state stabilise, 
0144:  MOVLW  0D
0145:  MOVWF  77
0146:  DECFSZ 77,F
0147:  GOTO   146
....................   shift_right(&data,1,input(ONE_WIRE_PIN)); // and load result. 
0148:  BSF    05.0
0149:  BCF    03.5
014A:  BTFSC  05.0
014B:  GOTO   14E
014C:  BCF    03.0
014D:  GOTO   14F
014E:  BSF    03.0
014F:  RRF    2E,F
....................   delay_us( 120 ); // wait until end of read slot. 
0150:  MOVLW  C7
0151:  MOVWF  77
0152:  DECFSZ 77,F
0153:  GOTO   152
0154:  GOTO   155
0155:  INCF   2D,F
0156:  GOTO   136
....................  } 
....................  
....................  return( data ); 
0157:  MOVF   2E,W
0158:  MOVWF  78
0159:  RETURN
.................... }  
....................  
.................... #include<ds1820.c>                              //Se incluye la librería del driver para el manejo del sensor DS18B20 
.................... float ds1820_read() 
015A:  CLRF   24
.................... { 
....................  int8 busy=0, temp1, temp2; 
....................  signed int16 temp3; 
....................  float result; 
....................  
....................  onewire_reset(); 
015B:  CALL   0F8
....................  onewire_write(0xCC); 
015C:  MOVLW  CC
015D:  MOVWF  2D
015E:  CALL   111
....................  onewire_write(0x44); 
015F:  MOVLW  44
0160:  MOVWF  2D
0161:  CALL   111
....................  
....................  while (busy == 0) 
0162:  MOVF   24,F
0163:  BTFSS  03.2
0164:  GOTO   169
....................   busy = onewire_read(); 
0165:  CALL   135
0166:  MOVF   78,W
0167:  MOVWF  24
0168:  GOTO   162
....................  
....................  onewire_reset(); 
0169:  CALL   0F8
....................  onewire_write(0xCC); 
016A:  MOVLW  CC
016B:  MOVWF  2D
016C:  CALL   111
....................  onewire_write(0xBE); 
016D:  MOVLW  BE
016E:  MOVWF  2D
016F:  CALL   111
....................  temp1 = onewire_read(); 
0170:  CALL   135
0171:  MOVF   78,W
0172:  MOVWF  25
....................  temp2 = onewire_read(); 
0173:  CALL   135
0174:  MOVF   78,W
0175:  MOVWF  26
....................  temp3 = make16(temp2, temp1); 
0176:  MOVF   26,W
0177:  MOVWF  28
0178:  MOVF   25,W
0179:  MOVWF  27
....................   
....................  //result = (float) temp3 / 2.0;   //Calculation for DS18S20 with 0.5 deg C resolution 
.................... result = (float) temp3 / 16.0;  //Calculation for DS18B20 with 0.1 deg C resolution 
017A:  MOVF   28,W
017B:  MOVWF  2E
017C:  MOVF   27,W
017D:  MOVWF  2D
*
01A2:  MOVF   7A,W
01A3:  MOVWF  30
01A4:  MOVF   79,W
01A5:  MOVWF  2F
01A6:  MOVF   78,W
01A7:  MOVWF  2E
01A8:  MOVF   77,W
01A9:  MOVWF  2D
01AA:  MOVF   30,W
01AB:  MOVWF  34
01AC:  MOVF   2F,W
01AD:  MOVWF  33
01AE:  MOVF   2E,W
01AF:  MOVWF  32
01B0:  MOVF   2D,W
01B1:  MOVWF  31
01B2:  CLRF   38
01B3:  CLRF   37
01B4:  CLRF   36
01B5:  MOVLW  83
01B6:  MOVWF  35
*
0280:  MOVF   7A,W
0281:  MOVWF  2C
0282:  MOVF   79,W
0283:  MOVWF  2B
0284:  MOVF   78,W
0285:  MOVWF  2A
0286:  MOVF   77,W
0287:  MOVWF  29
....................   
....................  delay_ms(200); 
0288:  MOVLW  C8
0289:  MOVWF  32
028A:  CALL   017
....................  return(result); 
028B:  MOVF   29,W
028C:  MOVWF  77
028D:  MOVF   2A,W
028E:  MOVWF  78
028F:  MOVF   2B,W
0290:  MOVWF  79
0291:  MOVF   2C,W
0292:  MOVWF  7A
0293:  BCF    0A.3
0294:  BCF    0A.4
0295:  GOTO   4E5 (RETURN)
.................... }  
....................  
....................  
.................... #include "flex_lcd.h"                           //LIBRERÍA LCD 
....................  
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... //#define LCD_DB4   PIN_B4 
.................... //#define LCD_DB5   PIN_B5 
.................... //#define LCD_DB6   PIN_B6 
.................... //#define LCD_DB7   PIN_B7 
.................... // 
.................... //#define LCD_RS    PIN_C0 
.................... //#define LCD_RW    PIN_C1 
.................... //#define LCD_E     PIN_C2 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... #define USE_LCD_RW   1 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
002B:  BTFSC  39.0
002C:  GOTO   02F
002D:  BCF    06.3
002E:  GOTO   030
002F:  BSF    06.3
0030:  BSF    03.5
0031:  BCF    06.3
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
0032:  BCF    03.5
0033:  BTFSC  39.1
0034:  GOTO   037
0035:  BCF    06.4
0036:  GOTO   038
0037:  BSF    06.4
0038:  BSF    03.5
0039:  BCF    06.4
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
003A:  BCF    03.5
003B:  BTFSC  39.2
003C:  GOTO   03F
003D:  BCF    06.5
003E:  GOTO   040
003F:  BSF    06.5
0040:  BSF    03.5
0041:  BCF    06.5
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
0042:  BCF    03.5
0043:  BTFSC  39.3
0044:  GOTO   047
0045:  BCF    06.6
0046:  GOTO   048
0047:  BSF    06.6
0048:  BSF    03.5
0049:  BCF    06.6
....................  
....................  delay_cycles(1); 
004A:  NOP
....................  output_high(LCD_E); 
004B:  BCF    06.2
004C:  BCF    03.5
004D:  BSF    06.2
....................  delay_us(2); 
004E:  MOVLW  03
004F:  MOVWF  77
0050:  DECFSZ 77,F
0051:  GOTO   050
....................  output_low(LCD_E); 
0052:  BSF    03.5
0053:  BCF    06.2
0054:  BCF    03.5
0055:  BCF    06.2
0056:  RETURN
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
0057:  CLRF   3A
....................  
.................... output_high(LCD_E); 
0058:  BSF    03.5
0059:  BCF    06.2
005A:  BCF    03.5
005B:  BSF    06.2
.................... delay_cycles(1); 
005C:  NOP
....................  
.................... retval_0 = input(LCD_DB4); 
005D:  BSF    03.5
005E:  BSF    06.3
005F:  BCF    03.5
0060:  BCF    3A.0
0061:  BTFSC  06.3
0062:  BSF    3A.0
.................... retval_1 = input(LCD_DB5); 
0063:  BSF    03.5
0064:  BSF    06.4
0065:  BCF    03.5
0066:  BCF    3A.1
0067:  BTFSC  06.4
0068:  BSF    3A.1
.................... retval_2 = input(LCD_DB6); 
0069:  BSF    03.5
006A:  BSF    06.5
006B:  BCF    03.5
006C:  BCF    3A.2
006D:  BTFSC  06.5
006E:  BSF    3A.2
.................... retval_3 = input(LCD_DB7); 
006F:  BSF    03.5
0070:  BSF    06.6
0071:  BCF    03.5
0072:  BCF    3A.3
0073:  BTFSC  06.6
0074:  BSF    3A.3
....................  
.................... output_low(LCD_E); 
0075:  BSF    03.5
0076:  BCF    06.2
0077:  BCF    03.5
0078:  BCF    06.2
....................  
.................... return(retval); 
0079:  MOVF   3A,W
007A:  MOVWF  78
007B:  RETURN
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
*
0080:  BSF    03.5
0081:  BCF    06.1
0082:  BCF    03.5
0083:  BSF    06.1
.................... delay_cycles(1); 
0084:  NOP
....................  
.................... high = lcd_read_nibble(); 
0085:  CALL   057
0086:  MOVF   78,W
0087:  MOVWF  39
....................  
.................... low = lcd_read_nibble(); 
0088:  CALL   057
0089:  MOVF   78,W
008A:  MOVWF  38
....................  
.................... return( (high<<4) | low); 
008B:  SWAPF  39,W
008C:  MOVWF  77
008D:  MOVLW  F0
008E:  ANDWF  77,F
008F:  MOVF   77,W
0090:  IORWF  38,W
0091:  MOVWF  78
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
*
007C:  BSF    03.5
007D:  BCF    06.0
007E:  BCF    03.5
007F:  BCF    06.0
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
*
0092:  MOVF   78,W
0093:  MOVWF  38
0094:  BTFSC  38.7
0095:  GOTO   080
.................... #else 
.................... delay_us(60); 
.................... #endif 
....................  
.................... if(address) 
0096:  MOVF   36,F
0097:  BTFSC  03.2
0098:  GOTO   09E
....................    output_high(LCD_RS); 
0099:  BSF    03.5
009A:  BCF    06.0
009B:  BCF    03.5
009C:  BSF    06.0
009D:  GOTO   0A2
.................... else 
....................    output_low(LCD_RS); 
009E:  BSF    03.5
009F:  BCF    06.0
00A0:  BCF    03.5
00A1:  BCF    06.0
....................  
....................  delay_cycles(1); 
00A2:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
00A3:  BSF    03.5
00A4:  BCF    06.1
00A5:  BCF    03.5
00A6:  BCF    06.1
.................... delay_cycles(1); 
00A7:  NOP
.................... #endif 
....................  
.................... output_low(LCD_E); 
00A8:  BSF    03.5
00A9:  BCF    06.2
00AA:  BCF    03.5
00AB:  BCF    06.2
....................  
.................... lcd_send_nibble(n >> 4); 
00AC:  SWAPF  37,W
00AD:  MOVWF  38
00AE:  MOVLW  0F
00AF:  ANDWF  38,F
00B0:  MOVF   38,W
00B1:  MOVWF  39
00B2:  CALL   02B
.................... lcd_send_nibble(n & 0xf); 
00B3:  MOVF   37,W
00B4:  ANDLW  0F
00B5:  MOVWF  38
00B6:  MOVWF  39
00B7:  CALL   02B
00B8:  RETURN
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
00B9:  BSF    03.5
00BA:  BCF    06.0
00BB:  BCF    03.5
00BC:  BCF    06.0
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
00BD:  BSF    03.5
00BE:  BCF    06.1
00BF:  BCF    03.5
00C0:  BCF    06.1
.................... #endif 
....................  
.................... output_low(LCD_E); 
00C1:  BSF    03.5
00C2:  BCF    06.2
00C3:  BCF    03.5
00C4:  BCF    06.2
....................  
.................... delay_ms(15); 
00C5:  MOVLW  0F
00C6:  MOVWF  32
00C7:  CALL   017
....................  
.................... for(i=0 ;i < 3; i++) 
00C8:  CLRF   24
00C9:  MOVF   24,W
00CA:  SUBLW  02
00CB:  BTFSS  03.0
00CC:  GOTO   0D5
....................    { 
....................     lcd_send_nibble(0x03); 
00CD:  MOVLW  03
00CE:  MOVWF  39
00CF:  CALL   02B
....................     delay_ms(5); 
00D0:  MOVLW  05
00D1:  MOVWF  32
00D2:  CALL   017
00D3:  INCF   24,F
00D4:  GOTO   0C9
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
00D5:  MOVLW  02
00D6:  MOVWF  39
00D7:  CALL   02B
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
00D8:  CLRF   24
00D9:  MOVF   24,W
00DA:  SUBLW  03
00DB:  BTFSS  03.0
00DC:  GOTO   0E6
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
00DD:  MOVF   24,W
00DE:  CALL   004
00DF:  MOVWF  25
00E0:  CLRF   36
00E1:  MOVF   25,W
00E2:  MOVWF  37
00E3:  CALL   07C
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
00E4:  INCF   24,F
00E5:  GOTO   0D9
....................     delay_ms(5); 
....................     #endif 
....................    } 
00E6:  BCF    0A.3
00E7:  BCF    0A.4
00E8:  GOTO   4E1 (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
02AD:  DECFSZ 33,W
02AE:  GOTO   2B0
02AF:  GOTO   2B3
....................    address = lcd_line_two; 
02B0:  MOVLW  40
02B1:  MOVWF  34
02B2:  GOTO   2B4
.................... else 
....................    address=0; 
02B3:  CLRF   34
....................  
.................... address += x-1; 
02B4:  MOVLW  01
02B5:  SUBWF  32,W
02B6:  ADDWF  34,F
.................... lcd_send_byte(0, 0x80 | address); 
02B7:  MOVF   34,W
02B8:  IORLW  80
02B9:  MOVWF  35
02BA:  CLRF   36
02BB:  MOVF   35,W
02BC:  MOVWF  37
02BD:  CALL   07C
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
*
0296:  MOVF   31,W
0297:  XORLW  0C
0298:  BTFSC  03.2
0299:  GOTO   2A1
029A:  XORLW  06
029B:  BTFSC  03.2
029C:  GOTO   2A9
029D:  XORLW  02
029E:  BTFSC  03.2
029F:  GOTO   2BF
02A0:  GOTO   2C4
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
02A1:  CLRF   36
02A2:  MOVLW  01
02A3:  MOVWF  37
02A4:  CALL   07C
....................       delay_ms(2); 
02A5:  MOVLW  02
02A6:  MOVWF  32
02A7:  CALL   017
....................       break; 
02A8:  GOTO   2C9
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
02A9:  MOVLW  01
02AA:  MOVWF  32
02AB:  MOVLW  02
02AC:  MOVWF  33
....................        break; 
*
02BE:  GOTO   2C9
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
02BF:  CLRF   36
02C0:  MOVLW  10
02C1:  MOVWF  37
02C2:  CALL   07C
....................        break; 
02C3:  GOTO   2C9
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
02C4:  MOVLW  01
02C5:  MOVWF  36
02C6:  MOVF   31,W
02C7:  MOVWF  37
02C8:  CALL   07C
....................        break; 
....................    } 
02C9:  RETURN
.................... } 
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) {  
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink);  
.................... }  
....................  
....................  
....................  
.................... float temperatura;                              //Variable 
....................  
....................  
.................... void main(void) 
*
04C7:  MOVF   03,W
04C8:  ANDLW  1F
04C9:  MOVWF  03
04CA:  BSF    03.5
04CB:  BSF    03.6
04CC:  MOVF   09,W
04CD:  ANDLW  C0
04CE:  MOVWF  09
04CF:  BCF    03.6
04D0:  BCF    1F.4
04D1:  BCF    1F.5
04D2:  MOVLW  00
04D3:  BSF    03.6
04D4:  MOVWF  08
04D5:  BCF    03.5
04D6:  CLRF   07
04D7:  CLRF   08
04D8:  CLRF   09
04D9:  BCF    03.7
....................  
.................... { 
....................     port_b_pullups(0xff); 
04DA:  MOVLW  FF
04DB:  BSF    03.5
04DC:  BCF    03.6
04DD:  MOVWF  15
04DE:  BCF    01.7
....................     lcd_init();                                 // Comandos de inicialización del lcd. 
04DF:  BCF    03.5
04E0:  GOTO   0B9
....................     delay_ms(50); 
04E1:  MOVLW  32
04E2:  MOVWF  32
04E3:  CALL   017
....................  
....................  
....................     while (TRUE) 
....................  
....................         { 
....................            temperatura = ds1820_read();                             //Lee el sensor 
04E4:  GOTO   15A
04E5:  MOVF   7A,W
04E6:  MOVWF  23
04E7:  MOVF   79,W
04E8:  MOVWF  22
04E9:  MOVF   78,W
04EA:  MOVWF  21
04EB:  MOVF   77,W
04EC:  MOVWF  20
....................            printf(lcd_putc,"\fTemperatura \n%3.1fC", temperatura);  //Imprime en display 
04ED:  MOVLW  0C
04EE:  BSF    03.6
04EF:  MOVWF  0D
04F0:  MOVLW  00
04F1:  MOVWF  0F
04F2:  BCF    03.0
04F3:  MOVLW  0E
04F4:  BCF    03.6
04F5:  MOVWF  24
04F6:  GOTO   2CA
04F7:  MOVLW  02
04F8:  MOVWF  04
04F9:  MOVF   23,W
04FA:  MOVWF  27
04FB:  MOVF   22,W
04FC:  MOVWF  26
04FD:  MOVF   21,W
04FE:  MOVWF  25
04FF:  MOVF   20,W
0500:  MOVWF  24
0501:  MOVLW  01
0502:  MOVWF  28
0503:  GOTO   372
0504:  MOVLW  43
0505:  MOVWF  31
0506:  CALL   296
....................            delay_ms(1000); 
0507:  MOVLW  04
0508:  MOVWF  24
0509:  MOVLW  FA
050A:  MOVWF  32
050B:  CALL   017
050C:  DECFSZ 24,F
050D:  GOTO   509
050E:  GOTO   4E4
....................  
....................        } 
....................  
.................... } 
050F:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
